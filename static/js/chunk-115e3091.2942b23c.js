(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-115e3091"],{"0060":function(e,t,c){},"119e":function(e,t,c){},"8f5a":function(e,t,c){"use strict";c("0060")},d1e8:function(e,t,c){"use strict";c("119e")},f54c:function(e,t,c){"use strict";c.r(t);var b=c("7a23"),l={class:"JSskill"},j=Object(b["m"])("div",{class:"grid-content bg-purple"},null,-1),n={class:"grid-content bg-purple"},O=Object(b["m"])("p",null,[Object(b["l"])(" Number、String 、Boolean 、Null、Undefined "),Object(b["m"])("br"),Object(b["l"])("Object 是 JavaScript 中所有对象的父对象"),Object(b["m"])("br"),Object(b["l"])("数据封装类对象：Object、Array、Boolean、Number 和 String"),Object(b["m"])("br"),Object(b["l"])("其他对象：Function、Arguments、Math、Date、RegExp、Error"),Object(b["m"])("br"),Object(b["l"])("新类型：Symbol ")],-1),a=Object(b["m"])("p",null,[Object(b["l"])(" 1) 不要在同一行声明多个变量"),Object(b["m"])("br"),Object(b["l"])("2) 使用 ===或!==来比较true/false或者数值"),Object(b["m"])("br"),Object(b["l"])("3) switch必须带有default分支"),Object(b["m"])("br"),Object(b["l"])("4) 函数应该有返回值"),Object(b["m"])("br"),Object(b["l"])("5) for if else 必须使用大括号"),Object(b["m"])("br"),Object(b["l"])("6) 语句结束加分号"),Object(b["m"])("br"),Object(b["l"])("7) 命名要有意义，使用驼峰命名法 ")],-1),r=Object(b["m"])("p",null,[Object(b["l"])(" 基本数据类型存储在栈中，引用数据类型（对象）存储在堆中，指针放在栈中。"),Object(b["m"])("br"),Object(b["l"])("两种类型的区别是：存储位置不同；原始数据类型直接存储在栈中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；引用数据类型存储在堆中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能"),Object(b["m"])("br"),Object(b["l"])("引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。 ")],-1),m=Object(b["m"])("p",null,[Object(b["l"])(" 栈（stack）：由编译器自动分配释放，存放函数的参数值，局部变量等；"),Object(b["m"])("br"),Object(b["l"])("堆（heap）：一般由程序员分配释放，若程序员不释放，程序结束时可能由操作系统释放。 ")],-1),u=Object(b["m"])("p",null,[Object(b["l"])(" 作用域链的原理和原型链很类似，如果这个变量在自己的作用域中没有，那么它会寻找父级的，直到最顶层。"),Object(b["m"])("br"),Object(b["l"])("注意：JS没有块级作用域，若要形成块级作用域，可通过（function（）｛｝）（）；立即执行的形式实现。 ")],-1),i=Object(b["m"])("p",null,[Object(b["l"])(" 1) this总是指向函数的直接调用者（而非间接调用者）"),Object(b["m"])("br"),Object(b["l"])("2) 如果有new关键字，this指向new出来的那个对象"),Object(b["m"])("br"),Object(b["l"])("3) 在事件中，this指向目标元素，特殊的是IE的attachEvent中的this总是指向全局对象window。 ")],-1),s=Object(b["m"])("p",null," 它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。 ",-1),o=Object(b["m"])("p",null,[Object(b["l"])(" IE为事件冒泡，Firefox同时支持事件捕获和事件冒泡。但并非所有浏览器都支持事件捕获。jQuery中使用"),Object(b["m"])("code",null,"event.stopPropagation()"),Object(b["l"])("方法可阻止冒泡;（旧IE的方法 "),Object(b["m"])("code",null,"ev.cancelBubble = true;"),Object(b["l"])("） ")],-1),f=Object(b["m"])("p",null,[Object(b["l"])(" 闭包指的是一个函数可以访问另一个函数作用域中变量。常见的构造方法，是在一个函数内部定义另外一个函数。内部函数可以引用外层的变量；外层变量不会被垃圾回收机制回收。"),Object(b["m"])("br"),Object(b["l"])("注意，闭包的原理是作用域链，所以闭包访问的上级作用域中的变量是个对象，其值为其运算结束后的最后一个值。"),Object(b["m"])("br"),Object(b["l"])("优点：避免全局变量污染。缺点：容易造成内存泄漏。"),Object(b["m"])("br"),Object(b["l"])("例子： ")],-1),p=Object(b["m"])("pre",{class:"hljs javascript"},[Object(b["m"])("code",null,[Object(b["m"])("span",{class:"hljs-function"},[Object(b["m"])("span",{class:"hljs-keyword"},"function"),Object(b["l"])(),Object(b["m"])("span",{class:"hljs-title"},"makeFunc"),Object(b["l"])("("),Object(b["m"])("span",{class:"hljs-params"}),Object(b["l"])(") ")]),Object(b["l"])("{\r\n    "),Object(b["m"])("span",{class:"hljs-keyword"},"var"),Object(b["l"])(" name = "),Object(b["m"])("span",{class:"hljs-string"},'"Mozilla"'),Object(b["l"])(";\r\n    "),Object(b["m"])("span",{class:"hljs-function"},[Object(b["m"])("span",{class:"hljs-keyword"},"function"),Object(b["l"])(),Object(b["m"])("span",{class:"hljs-title"},"displayName"),Object(b["l"])("("),Object(b["m"])("span",{class:"hljs-params"}),Object(b["l"])(") ")]),Object(b["l"])("{\r\n        "),Object(b["m"])("span",{class:"hljs-built_in"},"console"),Object(b["l"])(".log(name); \r\n    }\r\n    "),Object(b["m"])("span",{class:"hljs-keyword"},"return"),Object(b["l"])(" displayName;\r\n}\r\n"),Object(b["m"])("span",{class:"hljs-keyword"},"var"),Object(b["l"])(" myFunc = makeFunc();\r\nmyFunc();   "),Object(b["m"])("span",{class:"hljs-comment"},"//输出Mozilla"),Object(b["l"])("\r\n")])],-1),d=Object(b["m"])("p",null,' myFunc 变成一个 闭包。闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。在我们的例子中，myFunc 是一个闭包，由 displayName 函数和闭包创建时存在的 "Mozilla" 字符串形成。 ',-1),h=Object(b["m"])("p",null,[Object(b["m"])("strong"),Object(b["m"])("br"),Object(b["l"])("除了正常模式运行外，ECMAscript添加了第二种运行模式：“严格模式”。"),Object(b["m"])("br"),Object(b["l"])("作用："),Object(b["m"])("br"),Object(b["l"])("1) 消除js不合理，不严谨地方，减少怪异行为"),Object(b["m"])("br"),Object(b["l"])("2) 消除代码运行的不安全之处，"),Object(b["m"])("br"),Object(b["l"])("3) 提高编译器的效率，增加运行速度"),Object(b["m"])("br"),Object(b["l"])("4) 为未来的js新版本做铺垫。 ")],-1),v=Object(b["m"])("p",null,[Object(b["l"])(" 1) 创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。"),Object(b["m"])("br"),Object(b["l"])("2) 属性和方法被加入到 this 引用的对象中。"),Object(b["m"])("br"),Object(b["l"])("3) 新创建的对象由 this 所引用，并且最后隐式的返回 this 。 ")],-1),S=Object(b["m"])("p",null," Object.hasOwnProperty(proName)：是用来判断一个对象是否有你给出名称的属性。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。 ",-1),_=Object(b["m"])("p",null,[Object(b["l"])(" 全称：JavaScript Object Notation"),Object(b["m"])("br"),Object(b["l"])("JSON中对象通过“{}”来标识，一个“{}”代表一个对象，如{“AreaId”:”123”}，对象的值是键值对的形式（key：value）。JSON是JS的一个严格的子集，一种轻量级的数据交换格式，类似于xml。数据格式简单，易于读写，占用带宽小。"),Object(b["m"])("br"),Object(b["l"])("两个函数："),Object(b["m"])("br"),Object(b["l"])("JSON.parse(str)"),Object(b["m"])("br"),Object(b["l"])("解析JSON字符串 把JSON字符串变成JavaScript值或对象"),Object(b["m"])("br"),Object(b["l"])("JSON.stringify(obj) "),Object(b["m"])("br"),Object(b["l"])("将一个JavaScript值(对象或者数组)转换为一个 JSON字符串"),Object(b["m"])("br"),Object(b["l"])("eval('('＋json＋')') "),Object(b["m"])("br"),Object(b["l"])("用eval方法注意加括号 而且这种方式更容易被攻击 ")],-1),w=Object(b["m"])("p",null,[Object(b["l"])(" JS的延迟加载有助与提高页面的加载速度。"),Object(b["m"])("br"),Object(b["l"])("defer和async、动态创建DOM方式（用得最多）、按需异步载入JS"),Object(b["m"])("br"),Object(b["l"])("defer：延迟脚本。立即下载，但延迟执行（延迟到整个页面都解析完毕后再运行），按照脚本出现的先后顺序执行。"),Object(b["m"])("br"),Object(b["l"])("async：异步脚本。下载完立即执行，但不保证按照脚本出现的先后顺序执行。 ")],-1),J=Object(b["m"])("p",null,[Object(b["l"])(" 同步的概念在操作系统中：不同进程协同完成某项工作而先后次序调整（通过阻塞、唤醒等方式），同步强调的是顺序性，谁先谁后。异步不存在顺序性。"),Object(b["m"])("br"),Object(b["l"])("同步：浏览器访问服务器，用户看到页面刷新，重新发请求，等请求完，页面刷新，新内容出现，用户看到新内容之后进行下一步操作。"),Object(b["m"])("br"),Object(b["l"])("异步：浏览器访问服务器请求，用户正常操作，浏览器在后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。 ")],-1),k=Object(b["m"])("p",null,[Object(b["l"])(" 模块化开发指的是在解决某一个复杂问题或者一系列问题时，依照一种分类的思维把问题进行系统性的分解。模块化是一种将复杂系统分解为代码结构更合理，可维护性更高的可管理的模块方式。对于软件行业：系统被分解为一组高内聚，低耦合的模块。"),Object(b["m"])("br"),Object(b["l"])("（1）定义封装的模块"),Object(b["m"])("br"),Object(b["l"])("（2）定义新模块对其他模块的依赖"),Object(b["m"])("br"),Object(b["l"])("（3）可对其他模块的引入支持。在JavaScript中出现了一些非传统模块开发方式的规范。 CommonJS的模块规范，AMD（Asynchronous Module Definition），CMD（Common Module Definition）等。AMD是异步模块定义，所有的模块将被异步加载，模块加载不影响后边语句运行。 ")],-1),M=Object(b["m"])("p",null," call（）方法和apply（）方法的作用相同，动态改变某个类的某个方法的运行环境。他们的区别在于接收参数的方式不同。在使用call（）方法时，传递给函数的参数必须逐个列举出来。使用apply（）时，传递给函数的是参数数组。 ",-1),y=Object(b["m"])("p",null," 当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树。完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘 ",-1),g=Object(b["m"])("p",null,[Object(b["l"])(" pop、push、shift、unshift、splice、reverse、sort、concat、join、slice、toString、indexOf、lastIndexOf、reduce、reduceRight"),Object(b["m"])("br"),Object(b["l"])("forEach、map、filter、every、some ")],-1),N=Object(b["m"])("p",null,"全局变量、闭包、DOM清空或删除时，事件未清除、子元素存在引用",-1),L=Object(b["m"])("p",null," 通过使用多个非主要域名来请求静态文件，如果静态文件都放在主域名下，那静态文件请求的时候带有的cookie的数据提交给server是非常浪费的，还不如隔离开。因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。同时这种方式不会将cookie传入server，也减少了server对cookie的处理分析环节，提高了server的http请求的解析速度。 ",-1),E=Object(b["m"])("p",null," Flash提供了ExternalInterface接口与JavaScript通信，ExternalInterface有两个方法，call和addCallback，call的作用是让Flash调用js里的方法，addCallback是用来注册flash函数让js调用。 ",-1),F=Object(b["m"])("p",null,[Object(b["l"])(" Flash：适合处理多媒体、矢量图形、访问机器。但对css、处理文本不足，不容易被搜索。"),Object(b["m"])("br"),Object(b["l"])("Ajax：对css、文本支持很好，但对多媒体、矢量图形、访问机器不足。 ")],-1),X=Object(b["m"])("p",null," 第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；其他字符可以是字母、下划线、美元符号或数字。 ",-1),x=Object(b["m"])("p",null,[Object(b["l"])(" 1) 数据体积方面。JSON相对于XML来讲，数据的体积小，传递的速度更快些。"),Object(b["m"])("br"),Object(b["l"])("2) 数据交互方面。JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。"),Object(b["m"])("br"),Object(b["l"])("3) 数据描述方面。JSON对数据的描述性比XML较差。"),Object(b["m"])("br"),Object(b["l"])("4) 传输速度方面。JSON的速度要远远快于XML。 ")],-1),C=Object(b["m"])("p",null,[Object(b["l"])(" （1）XML用来传输和存储数据，HTML用来显示数据；"),Object(b["m"])("br"),Object(b["l"])("（2）XML使用的标签不用预先定义"),Object(b["m"])("br"),Object(b["l"])("（3）XML标签必须成对出现"),Object(b["m"])("br"),Object(b["l"])("（4）XML对大小写敏感"),Object(b["m"])("br"),Object(b["l"])("（5）XML中空格不会被删减"),Object(b["m"])("br"),Object(b["l"])("（6）XML中所有特殊符号必须用编码表示"),Object(b["m"])("br"),Object(b["l"])("（7）XML中的图片必须有文字说明 ")],-1),D=Object(b["m"])("p",null,[Object(b["l"])(" 渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进，达到更好的用户体验。"),Object(b["m"])("br"),Object(b["l"])("优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。 ")],-1),A=Object(b["m"])("p",null,[Object(b["l"])(" web socket：在一个单独的持久连接上提供全双工、双向的通信。使用自定义的协议（ws://、wss://），同源策略对web socket不适用。"),Object(b["m"])("br"),Object(b["l"])("web worker：运行在后台的JavaScript，不影响页面的性能。"),Object(b["m"])("br"),Object(b["l"])("创建worker：var worker = new Worker(url);"),Object(b["m"])("br"),Object(b["l"])("向worker发送数据：worker.postMessage(data);"),Object(b["m"])("br"),Object(b["l"])("接收worker返回的数据：worker.onmessage"),Object(b["m"])("br"),Object(b["l"])("终止一个worker的执行：worker.terminate(); ")],-1),I=Object(b["m"])("p",null,[Object(b["l"])(" 1) 标记清除："),Object(b["m"])("br"),Object(b["l"])("这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。"),Object(b["m"])("br"),Object(b["l"])("这个算法假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象。从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。 ")],-1),z=Object(b["m"])("p",null,[Object(b["l"])(" 2) 引用计数："),Object(b["m"])("br"),Object(b["l"])("这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。"),Object(b["m"])("br"),Object(b["l"])("该算法有个限制：无法处理循环引用。两个对象被创建，并互相引用，形成了一个循环。它们被调用之后不会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收。 ")],-1),W=Object(b["m"])("p",null,[Object(b["l"])(" JavaScript数据推送：commet（基于http长连接的服务器推送技术）。"),Object(b["m"])("br"),Object(b["l"])("基于web socket的推送：SSE（server-send Event） ")],-1),B=Object(b["m"])("p",null,[Object(b["l"])(" attribute是dom元素在文档中作为html标签拥有的属性"),Object(b["m"])("br"),Object(b["l"])("property是dom元素在js中作为对象拥有的属性。"),Object(b["m"])("br"),Object(b["l"])("所以，对于html的标准属性来说，attribute和property是同步的，是会自动更新的。但对于自定义属性，他们不同步。 ")],-1),V={class:"grid-content bg-purple"};function H(e,t,c,H,P,R){var T=Object(b["M"])("el-col"),U=Object(b["M"])("el-collapse-item"),Q=Object(b["M"])("el-collapse"),$=Object(b["M"])("Sidebar"),q=Object(b["M"])("el-row");return Object(b["D"])(),Object(b["i"])("div",l,[Object(b["m"])(q,null,{default:Object(b["ab"])((function(){return[Object(b["m"])(T,{span:4},{default:Object(b["ab"])((function(){return[j]})),_:1}),Object(b["m"])(T,{span:16},{default:Object(b["ab"])((function(){return[Object(b["m"])("div",n,[Object(b["m"])(Q,{modelValue:P.activeNames,"onUpdate:modelValue":t[1]||(t[1]=function(e){return P.activeNames=e}),onChange:R.handleChange},{default:Object(b["ab"])((function(){return[Object(b["m"])(U,{title:"1 介绍JavaScript的基本数据类型",name:"1"},{default:Object(b["ab"])((function(){return[O]})),_:1}),Object(b["m"])(U,{title:"2 说说写JavaScript的基本规范？",name:"2"},{default:Object(b["ab"])((function(){return[a]})),_:1}),Object(b["m"])(U,{title:"3 JavaScript有几种类型的值？你能画一下他们的内存图吗？",name:"3"},{default:Object(b["ab"])((function(){return[r]})),_:1}),Object(b["m"])(U,{title:"4 栈和堆的区别？",name:"4"},{default:Object(b["ab"])((function(){return[m]})),_:1}),Object(b["m"])(U,{title:"5 Javascript作用链域",name:"5"},{default:Object(b["ab"])((function(){return[u]})),_:1}),Object(b["m"])(U,{title:"6 谈谈this的理解",name:"6"},{default:Object(b["ab"])((function(){return[i]})),_:1}),Object(b["m"])(U,{title:"7 eval是做什么的？",name:"7"},{default:Object(b["ab"])((function(){return[s]})),_:1}),Object(b["m"])(U,{title:"8 关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？",name:"8"},{default:Object(b["ab"])((function(){return[o]})),_:1}),Object(b["m"])(U,{title:"9 什么是闭包（closure），为什么要用它？",name:"9"},{default:Object(b["ab"])((function(){return[f,p,d]})),_:1}),Object(b["m"])(U,{title:"10 javascript 代码中的 use strict;是什么意思 ? 使用它区别是什么？",name:"10"},{default:Object(b["ab"])((function(){return[h]})),_:1}),Object(b["m"])(U,{title:"11 new操作符具体干了什么呢?",name:"11"},{default:Object(b["ab"])((function(){return[v]})),_:1}),Object(b["m"])(U,{title:"12 Javascript中，执行时对象查找时，永远不会去查找原型的函数？",name:"12"},{default:Object(b["ab"])((function(){return[S]})),_:1}),Object(b["m"])(U,{title:"13 对JSON的了解？",name:"13"},{default:Object(b["ab"])((function(){return[_]})),_:1}),Object(b["m"])(U,{title:"14 JS延迟加载的方式有哪些？",name:"14"},{default:Object(b["ab"])((function(){return[w]})),_:1}),Object(b["m"])(U,{title:"15 同步和异步的区别?",name:"15"},{default:Object(b["ab"])((function(){return[J]})),_:1}),Object(b["m"])(U,{title:"16 模块化开发怎么做？",name:"16"},{default:Object(b["ab"])((function(){return[k]})),_:1}),Object(b["m"])(U,{title:"17 call和apply",name:"17"},{default:Object(b["ab"])((function(){return[M]})),_:1}),Object(b["m"])(U,{title:"18 回流与重绘",name:"18"},{default:Object(b["ab"])((function(){return[y]})),_:1}),Object(b["m"])(U,{title:"19 数组对象有哪些原生方法，列举一下",name:"19"},{default:Object(b["ab"])((function(){return[g]})),_:1}),Object(b["m"])(U,{title:"20 那些操作会造成内存泄漏",name:"20"},{default:Object(b["ab"])((function(){return[N]})),_:1}),Object(b["m"])(U,{title:"21 什么是Cookie 隔离？（或者：请求资源的时候不要带cookie怎么做）",name:"21"},{default:Object(b["ab"])((function(){return[L]})),_:1}),Object(b["m"])(U,{title:"22 flash和js通过什么类如何交互?",name:"22"},{default:Object(b["ab"])((function(){return[E]})),_:1}),Object(b["m"])(U,{title:"23 Flash与Ajax各自的优缺点？",name:"23"},{default:Object(b["ab"])((function(){return[F]})),_:1}),Object(b["m"])(U,{title:"24 有效的javascript变量定义规则",name:"24"},{default:Object(b["ab"])((function(){return[X]})),_:1}),Object(b["m"])(U,{title:"25 XML与JSON的区别？",name:"25"},{default:Object(b["ab"])((function(){return[x]})),_:1}),Object(b["m"])(U,{title:"26 HTML与XML的区别？",name:"26"},{default:Object(b["ab"])((function(){return[C]})),_:1}),Object(b["m"])(U,{title:"27 渐进增强与优雅降级",name:"27"},{default:Object(b["ab"])((function(){return[D]})),_:1}),Object(b["m"])(U,{title:"28 Web Worker和Web Socket？",name:"28"},{default:Object(b["ab"])((function(){return[A]})),_:1}),Object(b["m"])(U,{title:"29 JS垃圾回收机制？",name:"29"},{default:Object(b["ab"])((function(){return[I,z]})),_:1}),Object(b["m"])(U,{title:"30 web应用从服务器主动推送data到客户端的方式？",name:"30"},{default:Object(b["ab"])((function(){return[W]})),_:1}),Object(b["m"])(U,{title:"31 attribute与property的区别？",name:"31"},{default:Object(b["ab"])((function(){return[B]})),_:1})]})),_:1},8,["modelValue","onChange"])])]})),_:1}),Object(b["m"])(T,{span:4},{default:Object(b["ab"])((function(){return[Object(b["m"])("div",V,[Object(b["m"])($,{ref:"Sidebar"},null,512)])]})),_:1})]})),_:1})])}var P=c("fbd6"),R={name:"JSskill",components:{Sidebar:P["a"]},data:function(){return{activeNames:""}},methods:{handleChange:function(){}}};c("d1e8");R.render=H;t["default"]=R},fbd6:function(e,t,c){"use strict";var b=c("7a23"),l={class:"Sidebar"},j=Object(b["l"])(" 下载简历"),n=Object(b["m"])("br",null,null,-1),O=Object(b["l"])(" 返回首页");function a(e,t,c,a,r,m){var u=Object(b["M"])("el-button"),i=Object(b["M"])("router-link"),s=Object(b["M"])("el-card");return Object(b["D"])(),Object(b["i"])("div",l,[Object(b["m"])(s,{shadow:"always"},{default:Object(b["ab"])((function(){return[Object(b["m"])(u,{type:"success",plain:"",size:"mini",style:{width:"100%","margin-bottom":"10px"}},{default:Object(b["ab"])((function(){return[j]})),_:1}),n,Object(b["m"])(i,{to:"/"},{default:Object(b["ab"])((function(){return[Object(b["m"])(u,{type:"success",plain:"",size:"mini",style:{width:"100%","margin-bottom":"100px"}},{default:Object(b["ab"])((function(){return[O]})),_:1})]})),_:1})]})),_:1})])}var r={name:"Sidebar",components:{},data:function(){return{}}};c("8f5a");r.render=a;t["a"]=r}}]);